''' parse the log file and plot error/out-data for each timestep '''

import sys

def pick_number(line):
	words = line.split()
	#print(len(words))
	#print(words)
	for w in words:
		#print(w)
		if is_number(w):
			#print(w)
			return(float(w))
			break

def pick_varname(line):
	words = line.split()
	for w in words:
		w = w.strip('|')
		#print(w)
		if w.isalpha():
			#print(w)
			return w
			break


def is_number(s):
	try:
		float(s)
		return True
	except ValueError:
		return False

def num_out_vars(logfile):
	# find number of output variables in logfile
	f = open(logfile)
	n=0
	
	for line in f:
		if 'Timestep =' in line:
			for i in range(6):
				f.next()
			while True:
				line = f.next()
				if '------------------' in line:
					break
				else:
					n = n+1
			break
	f.close()
	return n


class out_var:
	def __init__(self):
		self.name = ''
		self.data = []

def main():

	helpMessage = 'This script parses the logfile and plots errors.\nUsage: python plot_error.py <logfile>'

	if len(sys.argv) != 2:
		print(helpMessage)
		return

	arg1 = sys.argv[1]

	if arg1 == 'help' or arg1 == '--help' or arg1 == '-help':
		print(helpMessage)
		return
	else:
		logfile = arg1

	#print(logfile)

	num_vars = num_out_vars(logfile)
	#print(num_vars)

	# imports
	try:
		import numpy as np
		import matplotlib.pyplot as plt
		from matplotlib import gridspec
	except:
		print('This script depends on Numpy and Matplotlib packages. Make sure they are installed on this system')
		return


	try:
		f = open(logfile, 'r')
	except FileNotFoundError:
		print('No such file: '+ logfile + '\nProvide name of the log file generated by CFD code.')
		return

	timestep = []
	P_err = []
	U_err = []
	V_err = []
	P_itr = []
	U_itr = []
	Vars = [out_var() for i in range(num_vars)]


	# read until you find: Timestep =
	'''
	for line in f:
		if 'Timestep =' in line:
			timestep.append(int(line.split()[3]))
		if 'Pressure error' in line:
			P_err.append(float(line.split()[3]))
		if 'Velocity U error' in line:
			U_err.append(float(line.split()[4]))
		if 'Velocity V error' in line:
			V_err.append(float(line.split()[4]))
			
		if 'Pressure solver iteration' in line:
			P_itr.append(int(line.split()[3]))
		if 'Velocity solver iteration' in line:
			U_itr.append(int(line.split()[3]))
	'''

	for line in f:
		if 'Timestep =' in line:
			timestep.append(int(line.split()[3]))
			f.next()	# skip ------ line
			# read next five lined for log data
			line = f.next()
			P_err.append(pick_number(line))
			line = f.next()
			P_itr.append(pick_number(line))
			line = f.next()
			U_err.append(pick_number(line))
			line = f.next()
			V_err.append(pick_number(line))
			line = f.next()
			U_itr.append(pick_number(line))

			for i in range(num_vars):
				line = f.next()
				#print(pick_varname(line))
				Vars[i].name = pick_varname(line)
				Vars[i].data.append(pick_number(line))
				





	f.close()

	timestep = np.array(timestep)

	gs = gridspec.GridSpec(2,1,height_ratios=[2,1])

	plt.figure()
	plt.subplot(gs[0])
	plt.plot(timestep, P_err, label='Pressure error')
	plt.plot(timestep, U_err, label='Velocity U error')
	plt.plot(timestep, V_err, label='Velocity V error')
	plt.ylabel('Error')
	plt.legend()
	plt.title('Run monitor')

	bar_width = 3

	plt.subplot(gs[1])
	plt.bar(timestep, P_itr, bar_width, label='Pressure')
	plt.bar(timestep+bar_width, U_itr, bar_width, label='Velocity')
	plt.xlabel('Timesteps')
	plt.ylabel('Solver iterations')
	plt.legend()

	plt.figure()
	gs2 = gridspec.GridSpec(num_vars,1)
	for i in range(num_vars):
		plt.subplot(gs2[i])
		plt.plot(timestep, Vars[i].data, label=Vars[i].name)
		plt.legend()


	plt.show()

if __name__ == '__main__':
	main()
